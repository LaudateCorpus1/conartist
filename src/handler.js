const fs = require('fs');
const outdent = require('outdent');
const path = require('path');

const { formatCode, formatJson } = require('./format');
const { load, raw, resolve } = require('./load');
const { merge } = require('./merge');

function array(opts) {
  opts = merge({ delimiter: '\n' }, opts);
  return function array(data, file) {
    // We use objects because merging behaves differently for top-level arrays than it does objects. See merge() tests.
    return merge(
      { temp: data },
      { temp: (raw(file) || '').split(opts.delimiter) }
    ).temp.join(opts.delimiter);
  };
}

function js() {
  return function js(data, file) {
    const resolved = resolve('conartist.js', path.dirname(file));
    return formatCode(
      outdent`
        // This file is autogenerated to retain the scope the JS is defined in.
        module.exports = require('./${resolved}')['${file}'].data();
      `
    );
  };
}

function json() {
  return function json(data, file) {
    return formatJson(merge(data, load(file)));
  };
}

function string() {
  return function string(data, file) {
    return `${raw(file) || data}`;
  };
}

module.exports = {
  array,
  js,
  json,
  string
};
